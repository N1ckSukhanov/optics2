private Recipe getRecipe(){
        Oculus oculus = new Oculus(1.5, 1.5, 1.5, 1.5, 1, 1, 1.5, 1.5);
        Cost cost = new Cost(1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000);
        Recipe recipe = new Recipe(ProductType.RECIPE, 1000, "me", "frame", "ratio", "blank", "geom", 100, "info", null);
        recipe.setCost(cost);
        cost.setRecipe(recipe);
        recipe.setOculus(oculus);
        oculus.setRecipe(recipe);
        return recipe;
    }

    private Lenses getLenses(){
        return new Lenses(1.5F, 1.5F, "orange");
    }

    private int counter = 20000;

    private void setCustomer(){
        Customer customer = new Customer("Client_" + (counter++), null);
        customerService.createCustomer(customer);
        customerService.setCurrent(customer);
    }

    @GetMapping("/plenty")
    public String plentyOfProducts(){
        for (int i = 1; i < 1500; i++){
            setCustomer();
            productService.putProduct(getRecipe());
            productService.putProduct(getLenses());
            productService.putProduct(new Other(ProductType.CASE));
            System.out.println(i);
        }

        for (int i = 1501; i < 2000; i++){
            setCustomer();
            for (int j = 0; j < 2; j++)
                productService.putProduct(getRecipe());
            for (int j = 0; j < 2; j++)
                productService.putProduct(getLenses());
            productService.putProduct(new Other(ProductType.CASE));
            productService.putProduct(new Other(ProductType.SUNGLASSES));
            System.out.println(i);
        }

        for (int i = 2001; i < 2500; i++){
            setCustomer();
            for (int j = 0; j < 5; j++)
                productService.putProduct(getRecipe());
            for (int j = 0; j < 10; j++)
                productService.putProduct(getLenses());
            productService.putProduct(getLenses());
            for (int j = 0; j < 2; j++)
                productService.putProduct(new Other(ProductType.CASE));
            for (int j = 0; j < 2; j++)
                productService.putProduct(new Other(ProductType.SUNGLASSES));
            System.out.println(i);
        }

        for (int i = 2501; i < 5000; i++){
            setCustomer();
            productService.putProduct(getRecipe());
            System.out.println(i);
        }

        for (int i = 5001; i < 7500; i++){
            setCustomer();
            productService.putProduct(getLenses());
            System.out.println(i);
        }

        return "redirect:/";
    }



    @GetMapping("/fill")
        public String fillLenses() {
            String[] lenses = {"1.5", "1.56", "1.61", "1.67", "1.74", "1.81"};
            for (String lens : lenses)
                optionRepository.save(new Option(OptionType.RECIPE_RATIO, lens));

            String[] coverage = {"Антифары", "Poloroid"};
            for (String cov : coverage)
                optionRepository.save(new Option(OptionType.RECIPE_COVERAGE, cov));

            String[] geometry = {"Сферические", "Асферические"};
            for (String geom : geometry)
                optionRepository.save(new Option(OptionType.RECIPE_GEOMETRY, geom));

            String[] names = {"Adria Glamur", "Adria 1 day"};
            for (String name : names)
                optionRepository.save(new Option(OptionType.LENSES_NAME, name));

            String[] colors = {"Blue", "Green"};
            for (String color : colors)
                optionRepository.save(new Option(OptionType.LENSES_COLOR, color));

            return "redirect:/";
        }